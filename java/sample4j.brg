%term ASSIGN=100 CONST=101 VAR=102 PLUS=103 MINUS=104 UMINUS=105
%%
stat:  ASSIGN(VAR,reg)   19 {
	   	System.out.println(" mov var, "+name[p.right().place()]);
		busy[p.right().place()]=0; /* liberta registo filho 1 */ }
stat:  ASSIGN(VAR,CONST) 20 { System.out.println(" mov var, const\n"); }

reg:   mem               18 {
		System.out.println(" mov "+name[p.place(getReg())]+", mem"); }
reg:   VAR               18 {
		System.out.println(" mov "+name[p.place(getReg())]+", var"); }
reg:   CONST             4 {
		System.out.println(" mov "+name[p.place( getReg())]+", const"); }
reg:   PLUS(reg,reg)     3 {
	   	System.out.println(" add "+name[p.place(p.left().place())]+", "+name[p.right().place()]);
		busy[p.right().place()]=0; }
reg:   PLUS(reg,CONST)   4 {
	   	System.out.println(" add "+name[p.place(p.left().place())]+", const"); }
reg:   PLUS(reg,mem)     19 {
	   	System.out.println(" add "+name[p.place(p.left().place())]+", mem"); }
reg:   MINUS(reg,reg)    3 {
	   	System.out.println(" sub "+name[p.place(p.left().place())]+", "+name[p.right().place()]);
		busy[p.right().place()]=0; }
reg:   MINUS(reg,CONST)  4 {
	   	System.out.println(" sub "+name[p.place(p.left().place())]+", const"); }
reg:   MINUS(reg,mem)    19 {
	   	System.out.println(" sub "+name[p.place(p.left().place())]+", mem"); }
reg:   UMINUS(reg)       3 {
	   	System.out.println(" neg "+name[p.place(p.left().place())]); }

mem:   reg               19 {
	   	System.out.println(" mov mem, "+name[p.left().place()]);
		busy[p.left().place()]=0; /* liberta registo filho 1 */ }
mem:   CONST             20 { System.out.println(" mov mem, const"); }
mem:   PLUS(mem,reg)     30 {
	   	System.out.println(" add mem, "+name[p.right().place()]);
		busy[p.right().place()]=0; /* liberta registo filho 1 */ }
mem:   PLUS(mem,CONST)   31 { System.out.println(" add mem, const"); }
mem:   MINUS(mem,reg)    30 {
	   	System.out.println(" sub mem, "+name[p.right().place()]);
		busy[p.right().place()]=0; /* liberta registo filho 1 */ }
mem:   MINUS(mem,CONST)  31 { System.out.println(" sub mem, const"); }
mem:   UMINUS(mem)       30 { System.out.println(" neg mem"); }
%%
private static final String name[] = { "eax", "ecx", "edx", "ebx", "esi", "edi", "no-reg" };
private int busy[] = new int[6];

private int getReg()
{
  int i;

  for(i = 0; i < busy.length; i++)
    if (busy[i] == 0) {
      busy[i] = 1;
      return i;
    }
  System.err.println("Registos esgotados");
  return busy.length + 1;
}

private static final short NULL=0;
private static final short ASSIGN=100;
private static final short CONST=101;
private static final short VAR=102;
private static final short PLUS=103;
private static final short MINUS=104;
private static final short UMINUS=105;

public static void main(String args[]) {
	Tree p;
	Selector s = new Selector();

	p = new Tree(ASSIGN,
		 new Tree(VAR, NULL),
		 new Tree(CONST, NULL)
                );
	s.select(p);
 
System.out.println("***\n");

	p = new Tree(ASSIGN,
		 new Tree(VAR, NULL),
		 new Tree(VAR, NULL)
                );
	s.select(p);
 
System.out.println("***\n");
	p = new Tree(ASSIGN,
		 new Tree(VAR, NULL),
		 new Tree(PLUS,
                      new Tree(UMINUS,new Tree(VAR, NULL)),
		      new Tree(CONST, NULL)
                     )
                );
	s.select(p);

System.out.println("***\n");
	p = new Tree(ASSIGN,
		 new Tree(VAR, NULL),
		 new Tree(MINUS,
                      new Tree(PLUS,
			new Tree(VAR, NULL),
			new Tree(MINUS,
			   new Tree(VAR, NULL),
			   new Tree(CONST, NULL)
			    )
		      ),
		      new Tree(PLUS,new Tree(VAR, NULL),new Tree(VAR, NULL))
                     )
                );
	s.select(p);

System.out.println("***\n");
	p = new Tree(MINUS,
                      new Tree(PLUS,
			new Tree(VAR, NULL),
			new Tree(MINUS,
			   new Tree(VAR, NULL),
			   new Tree(CONST, NULL)
			    )
		      ),
		      new Tree(PLUS,new Tree(VAR, NULL),new Tree(VAR, NULL))
                     );
	s.select(p);
System.out.println("(previous tree does not match a \"stat\" since the top node (MINUS) only derives a \"reg\")\n");
}
